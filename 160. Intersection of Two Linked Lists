/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int lenA = length(headA);
        int lenB = length(headB);
        while(lenA > lenB){
            headA = headA -> next;
            lenA--;
        }
        while(lenB > lenA){
            headB = headB -> next;
            lenB--;
        }
        
        while(headA != headB){
            headA = headA -> next;
            headB = headB -> next;
        }
        return headA;
        
    }
private:
    int length(ListNode *node){
        int len = 0;
        while(node){
            len++;
            node = node -> next;
        }
        return len;
    }
};


class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if (!headA || !headB) return nullptr;
        ListNode *tempA = headA;
        ListNode *tempB = headB;
        int iterations = 0;
        while (iterations < 3) {
            while (tempA && tempB) {
                if (tempA == tempB) return tempA;
                tempA = tempA->next;
                tempB = tempB->next;
            }
            if      (tempA) tempB = headA;
            else if (tempB) tempA = headB;
            iterations++;
        }
        return nullptr;
    }

};
