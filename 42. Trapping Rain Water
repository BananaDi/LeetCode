class Solution {  
public:  
    int trap(vector<int>& height) {  
        int curMax = 0;  
        int len = height.size();  
        vector<int>leftMax(len);  
        vector<int>rightMax(len);  
        
        for (int i = 0; i < len; i++){  
            leftMax[i] = curMax; 
            curMax = max(curMax, height[i]); 
        }  
        curMax = 0;  
        for (int i = len - 1; i >= 0; i--){  
            rightMax[i] = curMax;  
            curMax = max(curMax,height[i]);  
        }  
        int sum=0;  
        for (int i = 0; i < len; i++)  
        {  
            if (leftMax[i] != 0 && rightMax[i] != 0)  
            {  
                int temp = min(leftMax[i], rightMax[i]) - height[i];  
              
                if (temp > 0)  
                    sum += temp;  
              
            }  
        }  
        return sum;  
    }  
};

int trap(vector<int>& height)
{
    int ans = 0, current = 0;
    stack<int> st;
    while (current < height.size()) {
        while (!st.empty() && height[current] > height[st.top()]) {
            int top = st.top();
            st.pop();
            if (st.empty())
                break;
            int distance = current - st.top() - 1;
            int bounded_height = min(height[current], height[st.top()]) - height[top];
            ans += distance * bounded_height;
        }
        st.push(current++);
    }
    return ans;
}
