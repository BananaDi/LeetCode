/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>>res;
        if(!root) return res;
        
        queue<TreeNode*>q;
        q.push(root);
        
        while(!q.empty()){
            int size = q.size();
            vector<int> r;
            for(int i = 0; i < size; i++){
                TreeNode *cur = q.front(); q.pop();
                r.push_back(cur -> val);
                if(cur -> left)  q.push(cur -> left);
                if(cur -> right) q.push(cur -> right);
            }
            res.push_back(r);
        }
        reverse(res.begin(), res.end());
        return res;
    }
};

class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> list={};
        dfs(list,root,1);     
        reverse(list.begin(),list.end());
        return list;
    }
    
    void dfs(vector<vector<int>> &list, TreeNode * root, int depth){
        if(root==NULL)
            return;
        if(list.size()<depth)
            list.resize(depth);      
        list[depth-1].push_back(root->val);
        
        dfs(list,root->left,depth+1);
        dfs(list,root->right,depth+1);
    }
};
