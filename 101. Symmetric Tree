/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
// iterate
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if (!root) return true;
        
        TreeNode *left, *right;
        queue<TreeNode*>q1,q2;
        q1.push(root -> left);
        q2.push(root -> right);
        
        while(!q1.empty() && !q2.empty()){
            left  = q1.front(); q1.pop();
            right = q2.front(); q2.pop();
            
            if(left == NULL && right == NULL) continue;
            else if(left == NULL || right == NULL) return false;
            else if(left->val != right->val) return false;
            else{
                q1.push(left  -> left);
                q1.push(left  -> right);
                q2.push(right -> right);
                q2.push(right -> left);
            }
            
        }
        return true;
    }
};

/*
//recurse
class Solution{
public:
    bool isSymmetric(TreeNode* root) {
        if(!root) return true;
        return isMirror(root->left, root->right);
    }
    bool isMirror(TreeNode *left, TreeNode *right){
        if(left == nullptr && right == nullptr) return true;
        else if(left == nullptr || right == nullptr) return false;
        return (left -> val == right -> val) && isMirror(left -> left, right -> right) && isMirror(left -> right, right -> left);
    }    
    
};*/
