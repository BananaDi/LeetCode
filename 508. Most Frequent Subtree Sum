/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> findFrequentTreeSum(TreeNode* root) {
        vector<int> res;
        unordered_map<int,int>counts;             
        int maxCount = 0;
        
        sumPostOrder(root, counts, maxCount);
        for(auto &count : counts){
            if(count.second == maxCount) res.push_back(count.first);
        }
        return res;
    }
    
    int sumPostOrder(TreeNode* node, unordered_map<int,int> &counts, int &maxCount){
        if(!node) return 0;
        
        int sum = node -> val;
        sum += sumPostOrder(node -> left,  counts, maxCount);
        sum += sumPostOrder(node -> right, counts, maxCount);
        ++counts[sum];
        maxCount = max(maxCount, counts[sum]);
        return sum;
    }
};
